################################################################
#Importing data from Github
library(RCurl)
library(foreign)
url <- "https://docs.google.com/spreadsheets/d/1PnApS78YiDPaMnRpkZM2Z19tBIJSVkR6XfWrtACGAl4/pub?output=csv"
room.mates <- getURL(url)
room.mates <- read.csv(textConnection(room.mates), header = TRUE, skip =0)
url2 <- "https://docs.google.com/spreadsheets/d/1Kg7ceTcX6C8MLYHuWkDSFJWgvKqI_b5bJpP-6Zbj9aM/pub?output=csv"
chores <- getURL(url2)
chores <- read.csv(textConnection(chores), header = TRUE, skip =0)
View(chores)
View(room.mates)
#Calculating how good person 1 is at each chore.
p1.c1 <- sum(room.mates[1,2:4] - chores[1,2:4])
p1.c2 <- sum(room.mates[1,2:4] - chores[2,2:4])
p1.c3 <- sum(room.mates[1,2:4] - chores[3,2:4])
p1 <- rbind(c(p1.c1, p1.c2, p1.c3))
#Calculating how good person 2 is at each chore.
p2.c1 <- sum(room.mates[2,2:4] - chores[1,2:4])
p2.c2 <- sum(room.mates[2,2:4] - chores[2,2:4])
p2.c3 <- sum(room.mates[2,2:4] - chores[3,2:4])
p2 <- rbind(c(p2.c1, p2.c2, p2.c3))
#Calculating how good person 3 is at each chore.
p3.c1 <- sum(room.mates[3,2:4] - chores[1,2:4])
p3.c2 <- sum(room.mates[3,2:4] - chores[2,2:4])
p3.c3 <- sum(room.mates[3,2:4] - chores[3,2:4])
p3 <- rbind(c(p3.c1, p3.c2, p3.c3))
#Combining person-chore 'cost' matrix
final <- rbind(p1, p2, p3)
View(final)
#Solving the Assignment Problem
answer <- lp.assign(final, direction = "min")
answer$solution
answer <- lp.assign(final, direction = "min")
################################################################
#Importing data from Github
library(RCurl)
library(foreign)
library(linprog)
url <- "https://docs.google.com/spreadsheets/d/1PnApS78YiDPaMnRpkZM2Z19tBIJSVkR6XfWrtACGAl4/pub?output=csv"
room.mates <- getURL(url)
room.mates <- read.csv(textConnection(room.mates), header = TRUE, skip =0)
url2 <- "https://docs.google.com/spreadsheets/d/1Kg7ceTcX6C8MLYHuWkDSFJWgvKqI_b5bJpP-6Zbj9aM/pub?output=csv"
chores <- getURL(url2)
chores <- read.csv(textConnection(chores), header = TRUE, skip =0)
################################################################
#Calculating how good person 1 is at each chore.
p1.c1 <- sum(room.mates[1,2:4] - chores[1,2:4])
p1.c2 <- sum(room.mates[1,2:4] - chores[2,2:4])
p1.c3 <- sum(room.mates[1,2:4] - chores[3,2:4])
p1 <- rbind(c(p1.c1, p1.c2, p1.c3))
#Calculating how good person 2 is at each chore.
p2.c1 <- sum(room.mates[2,2:4] - chores[1,2:4])
p2.c2 <- sum(room.mates[2,2:4] - chores[2,2:4])
p2.c3 <- sum(room.mates[2,2:4] - chores[3,2:4])
p2 <- rbind(c(p2.c1, p2.c2, p2.c3))
#Calculating how good person 3 is at each chore.
p3.c1 <- sum(room.mates[3,2:4] - chores[1,2:4])
p3.c2 <- sum(room.mates[3,2:4] - chores[2,2:4])
p3.c3 <- sum(room.mates[3,2:4] - chores[3,2:4])
p3 <- rbind(c(p3.c1, p3.c2, p3.c3))
#Combining person-chore 'cost' matrix
final <- rbind(p1, p2, p3)
################################################################
#Solving the Assignment Problem
answer <- lp.assign(final, direction = "min")
answer$solution
answer
str(answer)
answer <- lp.assign(final, direction = "min")
answer$solution
answer$objval
################################################################
#Importing Songs
setwd("~/Documents/Text Analysis of Quiero Adorar")
text.v <- scan("Songs.txt", what = "character", sep = "\n")
head(text.v)
setwd("~/Documents/Text Analysis of Quiero Adorar/Quiero-Adorar")
text.v <- scan("Songs.txt", what = "character", sep = "\n")
head(text.v)
text.v
songs.v <- paste(text.v, collapse = " ")
head(songs.v)
#Making words lower case
songs.lower.v <- tolower(songs.v)
songs.lower.v
#Producing a list of words
song.words.l <- strsplit(songs.lower.v, "\\W")
song.words.l
#Unlisting a word
song.words.l <- strsplit(songs.lower.v, "\\W")
song.words.l
#Unlisting a word
song.word.v <- unlist(song.words.l)
song.word.v
#Keeping only the non-blanks
not.blanks.v <- which(song.word.v != "")
song.word.v <- song.word.v[not.blanks.v]
#Removing sight words
not.sight.words <- which(song.word.v != "oh" &
song.word.v != "a" &
song.word.v != "tu" &
song.word.v != "you" &
song.word.v != "to" &
song.word.v != "de" &
song.word.v != "u" &
song.word.v != "que" &
song.word.v != "is" &
song.word.v != "my" &
song.word.v != "your" &
song.word.v != "ti" &
song.word.v != "we" &
song.word.v != "la" &
song.word.v != "coro" &
song.word.v != "en" &
song.word.v != "me" &
song.word.v != "mi" &
song.word.v != "y" &
song.word.v != "on" &
song.word.v != "the" &
song.word.v != "lo" &
song.word.v != "and" &
song.word.v != "tú" &
song.word.v != "with" &
song.word.v != "o" &
song.word.v != "verso" &
song.word.v != "has" &
song.word.v != "s" &
song.word.v != "tú" &
song.word.v != "with" &
song.word.v != "sofi" &
song.word.v != "por" &
song.word.v != "for" &
song.word.v != "of" &
song.word.v != "it" &
song.word.v != "al" &
song.word.v != "un" &
song.word.v != "se" &
song.word.v != "por" &
song.word.v != "for" &
song.word.v != "chorus")
song.word.v <- song.word.v[not.sight.words]
head(song.word.v)
length(song.word.v[which(song.word.v=="heart")])/length((song.word.v))
length(unique(song.word.v))/length(song.word.v)
song.freq.t <- table(song.word.v)
sorted.song.freq.t <- sort(song.freq.t, decreasing = TRUE)
sorted.song.freq.t
sorted.song.rel.freqs.t <- 100*(sorted.song.freq.t/sum(sorted.song.freq.t))
sorted.song.rel.freqs.t
#Top 10 Words
plot(sorted.song.rel.freqs.t[1:10], type = "b",
xlab = "Top Ten Words", ylab = "Percentage of Quiero Adorar", xaxt = "n")
axis(1, 1: 10, labels = names(sorted.song.rel.freqs.t[1:10]))
#Top 10 Words
plot(sorted.song.rel.freqs.t[1:20], type = "b",
xlab = "Top Twenty Words", ylab = "Percentage of Quiero Adorar", xaxt = "n")
axis(1, 1: 20, labels = names(sorted.song.rel.freqs.t[1:20]))
n.time.v <- seq(1:length(song.word.v))
#Create a vector for the occurance of 'quiero', standardized for the length of the texrt
quiero.v <- which(song.word.v == 'quiero')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[quiero.v] <- 1
plot(w.count.v, main = "Dispersion Plot of 'quiero' in Quiero Adorar",
xlab = "Album Time", ylab = "quiero", type = "h", ylim = c(0,1), yaxt = 'n')
rm(list = ls())
song.v <- scan("Songs.txt", what = "character", sep = "\n")
song.position <- grep("^SONG:", song.v)
song.v[song.position]
1658*1658
bible.v <- scan("http://www.gutenberg.org/cache/epub/10/pg10.txt", what = "character", sep = "\n")
bible.v <- paste(bible.v, collapse = " ")
head(bible.v)
head(bible.v)
bible.lines <- paste(bible.v, collapse = " ")
bible.lines.lower <- tolower(bible.lines)
songs.v <- paste(text.v, collapse = " ")
head(songs.v)
bible.lines.lower <- paste(bible.lines.lower, collapse = " ")
head(bible.lines.lower)
#Creating a list of words from a novel using regular expressions
moby.words.l <- strsplit(novel.lower.v, "\\W")
bible.lines.lower.l <- strsplit(bible.lines.lower, "\\W")
bible.v <- scan("http://www.gutenberg.org/cache/epub/10/pg10.txt", what = "character", sep = "\n")
#The scan function can load data from directory or from the internet, you can place a url instead:
bible.v <- scan("http://www.gutenberg.org/cache/epub/10/pg10.txt", what = "character", sep = "\n")
bible.v <- paste(bible.v, collapse = " ")
head(bible.v)
bible.lines <- paste(bible.v, collapse = " ")
#converting text to lowercase.
bible.lines.lower <- tolower(bible.lines)
#Removing the line breaks
bible.lines.lower <- paste(bible.lines.lower, collapse = " ")
head(bible.lines.lower)
#Creating a list of words from a novel using regular expressions
bible.lines.lower.l <- strsplit(bible.lines.lower, "\\W")
#Unlisting
bible.lines.lower.l <- unlist(bible.lines.lower.l)
bible.lines.lower.l[which(bible.lines.lower.l == "jesus")]
length(bible.lines.lower.l[which(bible.lines.lower.l == "jesus")])
bible.freq.t <- table(bible.lines.lower.l)
bible.freq.t <- sort(bible.freq.t, decreasing = TRUE)
bible.freq.t
head(bible.freq.t)
head(bible.freq.t, n = 50)
n.time.v <- seq(1:length(bible.lines.lower.l))
jesus.v <- which(bible.lines.lower.l == 'jesus')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of 'quiero' in Quiero Adorar",
xlab = "Album Time", ylab = "quiero", type = "h", ylim = c(0,1), yaxt = 'n')
#Create a vector for the occurance of 'jesus', standardized for the length of the texrt
jesus.v <- which(bible.lines.lower.l == 'lord')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of a Word in the Bible",
xlab = "Bible Time", ylab = "lord", type = "h", ylim = c(0,1), yaxt = 'n')
jesus.v <- which(bible.lines.lower.l == 'jesus')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of the word 'Jesus' in the Bible",
xlab = "Bible Time", ylab = "lord", type = "h", ylim = c(0,1), yaxt = 'n')
#Create a vector for the occurance of 'jesus', standardized for the length of the texrt
jesus.v <- which(bible.lines.lower.l == 'jesus')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of the word 'Jesus' in the Bible",
xlab = "Bible Time", ylab = "jesus", type = "h", ylim = c(0,1), yaxt = 'n')
Create a vector for the occurance of 'jesus', standardized for the length of the texrt
jesus.v <- which(bible.lines.lower.l == 'lord')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of the word 'Jesus' in the Bible",
xlab = "Bible Time", ylab = "lord", type = "h", ylim = c(0,1), yaxt = 'n')
#Create a vector for the occurance of 'jesus', standardized for the length of the texrt
jesus.v <- which(bible.lines.lower.l == 'lord')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of the word 'Lord' in the Bible",
xlab = "Bible Time", ylab = "lord", type = "h", ylim = c(0,1), yaxt = 'n')
length(bible.lines.lower.l[which(bible.lines.lower.l == "jesus")])
head(bible.freq.t, n=50)
#Create a vector for the occurance of 'jesus', standardized for the length of the texrt
jesus.v <- which(bible.lines.lower.l == 'sin')
w.count.v <- rep(NA, length(n.time.v))
w.count.v[jesus.v] <- 1
plot(w.count.v, main = "Dispersion Plot of the word 'Sin' in the Bible",
xlab = "Bible Time", ylab = "sin", type = "h", ylim = c(0,1), yaxt = 'n')
#Finding start of new songs
rm(list = ls())
song.v <- scan("Songs.txt", what = "character", sep = "\n")
song.position <- grep("^SONG:", song.v)
song.v[song.position]
